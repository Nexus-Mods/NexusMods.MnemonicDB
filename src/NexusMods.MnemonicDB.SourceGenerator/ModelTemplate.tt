<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using Microsoft.Extensions.DependencyInjection;
using __MODELS__ = global::NexusMods.MnemonicDB.Abstractions.Models;
using __ABSTRACTIONS__ = global::NexusMods.MnemonicDB.Abstractions;
using __DI__ = Microsoft.Extensions.DependencyInjection;


namespace <#=Model.Namespace#>
{
    public class <#=Model.Name#> : __MODELS__.ITemporaryEntity
    {
        public static class Attributes
        {
               private const string __ns__ = "<#=Model.Namespace#>.<#=Model.Name#>";

<#
foreach (var attribute in Model.Attributes)
{
#>
               public static readonly global::<#=attribute.Type.ToDisplayString()#> <#=attribute.Name#> = new(__ns__, nameof(<#=attribute.Name#>)) <#=attribute.AttributePostfix#>;
<#
}
#>
               // References
<#
foreach (var reference in Model.References)
{
    if (reference.MultiCardinality)
    {
#>
               public static readonly global::NexusMods.MnemonicDB.Abstractions.Attributes.ReferencesAttribute <#= reference.Name #>Ids = new(__ns__, "<#= reference.Name #>");
<#
    }
    else
    {
#>
               public static readonly global::NexusMods.MnemonicDB.Abstractions.Attributes.ReferenceAttribute <#= reference.Name #>Id = new(__ns__, "<#= reference.Name #>");
<#
    }
}
#>
        }

        public <#=Model.Name#>(__ABSTRACTIONS__.ITransaction tx)
        {
            Id = tx.TempId();
            tx.Attach(this);
        }

        public <#=Model.Name#>(__ABSTRACTIONS__.ITransaction tx, __ABSTRACTIONS__.EntityId id)
        {
            Id = id;
            tx.Attach(this);
        }

        public <#=Model.Name#>ReadModel Remap(__ABSTRACTIONS__.ICommitResult result)
        {
            return new <#=Model.Name#>ReadModel(result.Db, result[Id]);
        }


        public __ABSTRACTIONS__.EntityId Id { get; private set; }

<#
foreach (var attribute in Model.Attributes)
{
#>
        public required <#=attribute.TypeInfo!.HighLevel.ToDisplayString()#> <#=attribute.Name#> { get; init; }
<#
}
#>

<#
foreach (var reference in Model.References)
{
    if (reference.MultiCardinality)
    {
#>
        public required __ABSTRACTIONS__.EntityId[] <#=reference.Name#>Ids { get; init; }
<#
    }
    else
    {
#>
        public required __ABSTRACTIONS__.EntityId <#=reference.Name#>Id { get; init; }
<#
    }
}
#>


    public static implicit operator __ABSTRACTIONS__.EntityId(<#=Model.Name#> self) => self.Id;

    public void AddTo(__ABSTRACTIONS__.ITransaction tx)
    {
<#
foreach (var attribute in Model.Attributes)
{
#>
         tx.Add(Id, Attributes.<#=attribute.Name#>, <#=attribute.Name#>);
<#
}
#>

<#
foreach (var attribute in Model.References)
{
    if (attribute.MultiCardinality)
    {
#>
         tx.Add(Id, Attributes.<#= attribute.Name #>Ids, <#= attribute.Name #>Ids);
<#
    }
    else
    {
#>
         tx.Add(Id, Attributes.<#= attribute.Name #>Id, <#= attribute.Name #>Id);
<#
    }
}
#>
    }

    public static <#=Model.Name#>ReadModel Get(__ABSTRACTIONS__.IDb db, __ABSTRACTIONS__.EntityId id)
    {
        return new <#=Model.Name#>ReadModel(db, id);
    }

    public static IEnumerable<<#=Model.Name#>ReadModel> Get(__ABSTRACTIONS__.IDb db, IEnumerable<__ABSTRACTIONS__.EntityId> ids)
    {
        foreach (var id in ids)
        {
            yield return Get(db, id);
        }
    }
}

public class <#=Model.Name#>ReadModel(__ABSTRACTIONS__.IDb db, __ABSTRACTIONS__.EntityId id) : __MODELS__.ReadOnlyModel(db, id)
{

<#
foreach (var attribute in Model.Attributes)
{
#>
    public <#=attribute.HighLevelType#> <#=attribute.Name#> => <#=Model.Name#>.Attributes.<#=attribute.Name#>.Get(this);
<#
}
#>

<#
foreach (var reference in Model.References)
{
    if (reference.MultiCardinality)
    {
#>
    public IEnumerable<__ABSTRACTIONS__.EntityId> <#= reference.Name#>Ids => <#=Model.Name#>.Attributes.<#=reference.Name#>Ids.Get(this);
<#
    }
    else
    {
#>
    public __ABSTRACTIONS__.EntityId <#= reference.Name #>Id => <#=Model.Name#>.Attributes.<#=reference.Name#>Id.Get(this);

    public <#= reference.ReferenceModelName #>ReadModel <#= reference.Name #> => new <#= reference.ReferenceModelName #>ReadModel(Db, <#= reference.Name #>Id);
<#
    }
}
#>

<#
foreach (var backRef in Model.BackRefs)
{
#>
    public IEnumerable<<#= backRef.OtherModelName #>ReadModel> <#= backRef.ThisAttributeName #>
   {
      get {
         foreach (var id in Db.GetBackRefs(<#= backRef.OtherModel#>.Attributes.<#= backRef.OtherAttributeName #>Id, Id))
         {
            yield return <#= backRef.OtherModelName #>.Get(Db, id);
         }
      }
   }
<#
}
#>
}

public static class <#=Model.Name#>Extensions
{
    public static __DI__.IServiceCollection Add<#=Model.Name#>Model(this __DI__.IServiceCollection collection)
    {
<#
foreach (var attribute in Model.Attributes)
{
#>
        collection.AddSingleton<__ABSTRACTIONS__.IAttribute>(<#=Model.Name#>.Attributes.<#=attribute.Name#>);
<#
}
#>
<#
foreach (var attribute in Model.References)
{
#>
        collection.AddSingleton<__ABSTRACTIONS__.IAttribute>(<#=Model.Name#>.Attributes.<#=attribute.AttributeName#>);
<#
}
#>
        return collection;
    }
}



}


<#+
    public ConcreteModel Model;
#>
