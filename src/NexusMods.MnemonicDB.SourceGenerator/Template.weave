@namespace NexusMods.MnemonicDB.SourceGenerator
@methodname RenderModel
@model ModelAnalyzer

#nullable enable



namespace {{= model.Namespace}};

using global::System;
using global::System.Linq;
using global::System.Collections;
using global::System.Collections.Generic;
using global::TransparentValueObjects;

using global::NexusMods.MnemonicDB.Abstractions.Query;
using global::System.Reactive.Linq;
using global::DynamicData;
using global::Microsoft.Extensions.DependencyInjection;
using global::NexusMods.MnemonicDB.Abstractions;
using global::System.Diagnostics.CodeAnalysis;
using global::System.Diagnostics.Contracts;

using __ABSTRACTIONS__ = NexusMods.MnemonicDB.Abstractions;
using __MODELS__ = NexusMods.MnemonicDB.Abstractions.Models;
using __DI__ = Microsoft.Extensions.DependencyInjection;
using __COMPARERS__ = NexusMods.MnemonicDB.Abstractions.ElementComparers;


/// <summary>
/// The top level model definition for the {{= model.Name}} model. This class is rarely 
/// used directly, instead, the ReadOnly struct or the New class should be used.
/// </summary>
{{= model.Comments}}
public partial class {{= model.Name}} : __MODELS__.IModelFactory<{{= model.Name}}, {{= model.Name}}.ReadOnly>
{

    {{each attr in model.Attributes}}
    {{= attr.Comments}}
    {{if attr.IsReference}}
    public static {{= attr.AttributeType.ToDisplayString()}} {{= attr.ContextualName}} => {{= attr.FieldName}};
    {{else}}
    {{/if}}
    {{/each}}

    #region CRUD Methods

    {{each attr in model.Attributes}}
    {{if attr.IsIndexed || attr.IsReference}}
    /// <summary>
    /// Finds all {{= model.Name}} entities with the given value for the {{= attr.Name}} attribute.
    /// </summary>
    public static IEnumerable<{{= model.Name}}.ReadOnly> FindBy{{= attr.Name}}(__ABSTRACTIONS__.IDb db, {{= attr.HighLevelType.ToDisplayString()}} value) {
    {{if attr.IsReference}}
        return db.GetBackrefModels<{{= model.Name}}.ReadOnly>({{= attr.FieldName}}, value);    
    {{else}}
        //return db.Datoms({{= attr.FieldName}}, value).AsModels<{{= model.Name}}.ReadOnly>(db);
        throw new NotImplementedException();
    {{/if}}    
    }
    {{/if}}
    {{/each}}

    /// <summary>
    /// A list of all required attributes of the model.
    /// </summary>
    public static __ABSTRACTIONS__.IAttribute[] RequiredAttributes => new __ABSTRACTIONS__.IAttribute[] {
        {{each attr in model.Attributes}}
        {{if !attr.IsMarker && !attr.IsOptional}}
        {{= attr.FieldName}},
        {{/if}}
        {{/each}}
    };

    /// <summary>
    /// The primary attribute of the model, this really just means one of the required attributes of the model
    /// if an entity has this attribute, it is considered a valid entity.
    /// </summary>
    public static __ABSTRACTIONS__.IAttribute PrimaryAttribute => {{= model.Attributes[0].FieldName}};

    /// <summary>
    /// A list of all attributes of the model.
    /// </summary>
    public static __ABSTRACTIONS__.IAttribute[] AllAttributes => new __ABSTRACTIONS__.IAttribute[] {
        {{each attr in model.Attributes}}
        {{= attr.FieldName}},
        {{/each}}
    };
    
    public static __ABSTRACTIONS__.IAttribute[] AllAttributesWithIncludes => 
        AllAttributes
       {{each include in model.Includes}}
       .Concat({{= include}}.AllAttributesWithIncludes)
       {{/each}}
       .ToArray();

    /// <summary>
    /// Returns all {{= model.Name}} entities in the database.
    /// </summary>
    public static IEnumerable<{{=model.Name}}.ReadOnly> All(__ABSTRACTIONS__.IDb db) {
        //return db.Datoms(PrimaryAttribute).AsModels<{{= model.Name}}.ReadOnly>(db);
        throw new NotImplementedException();
    }


    /// <summary>
    /// Loads a model from the database, not providing any validation
    /// </summary>
    public static ReadOnly Load(__ABSTRACTIONS__.IDb db, __ABSTRACTIONS__.EntityId id) {
        return new ReadOnly(db, id);
    }

    /// <summary>
    /// Observe a model from the database, the stream ends when the model is deleted or otherwise invalidated
    /// </summary>
    public static IObservable<ReadOnly> Observe(IConnection conn, EntityId id)
    {
        return conn.ObserveDatoms(id)
            .QueryWhenChanged(d => new ReadOnly(conn.Db, id))
            .TakeWhile(model => model.IsValid());
    }

    /// <summary>
    /// Observe all models of this type from the database
    /// </summary>
    public static IObservable<DynamicData.IChangeSet<ReadOnly, EntityId>> ObserveAll(IConnection conn)
    {
        return conn.ObserveDatoms(PrimaryAttribute)
            .AsEntityIds()
            .Transform(d => Load(conn.Db, d.E));
    }

    /// <summary>
    /// Tries to get the entity with the given id from the database, if the model is invalid, it returns false.
    /// </summary>
    public static bool TryGet(__ABSTRACTIONS__.IDb db, __ABSTRACTIONS__.EntityId id, [NotNullWhen(true)] out {{= model.Name}}.ReadOnly? result)
    {
        var model = Load(db, id);
        if (model.IsValid()) {
            result = model;
            return true;
        }
        result = default;
        return false;
    }

    /// <summary>
    /// Assumes that the ids given point to {{= model.Name}} entities, and
    /// returns a list of ReadOnly models of the entities.
    /// </summary>
    public static IEnumerable<{{= model.Name}}.ReadOnly> Load(__ABSTRACTIONS__.IDb db, IEnumerable<__ABSTRACTIONS__.EntityId> ids) {
        return ids.Select(id => new {{= model.Name}}.ReadOnly(db, id));
    }

    #endregion


    /// <summary>
    /// Constructs a new {{= model.Name}} model from the given entity id, used to provide a typed structured
    /// way to interact with the entity before it is commited to the database.
    /// </summary>
    public partial struct New : __MODELS__.ITemporaryEntity, __MODELS__.IHasEntityId {
        private readonly __ABSTRACTIONS__.Datoms _datoms;

        {{if model.Includes.Count == 0}}
        
        /// <summary>
        /// Constructs a new {{= model.Name}} model from the given transaction with a generated temporary id.
        /// </summary>
        public New(__ABSTRACTIONS__.Datoms tx) {
            Id = TempId.Next();
            _datoms = tx;
        }
        
        {{else}}
        
        /// <summary>
        /// Constructs a new {{= model.Name}} model from the given transaction with the given entity id.
        /// </summary>
        public New(__ABSTRACTIONS__.Datoms tx, out __ABSTRACTIONS__.EntityId id) {
            _datoms = tx;
            Id = TempId.Next();
            id = Id;
        }
        
        /// <summary>
        /// Constructs a new {{= model.Name}} model from the given transaction with the given entity partition for the generated temporary id.
        /// </summary>
        public New(__ABSTRACTIONS__.Datoms tx, __ABSTRACTIONS__.PartitionId partition, out __ABSTRACTIONS__.EntityId id) {
            _datoms = tx;
            Id = TempId.Next(partition);
            id = Id;
        }
        
        {{/if}}

        /// <summary>
        /// Constructs a new {{= model.Name}} model from the given transaction with the given entity id.
        /// </summary>
        public New(__ABSTRACTIONS__.Datoms tx, __ABSTRACTIONS__.EntityId eid) {
            _datoms = tx;
            Id = eid;
        }

        {{each include in model.Includes}}
        /// <summary>
        /// Gets the included entity of type {{= include.Name}} from the transaction.
        /// </summary>
        public {{= include.ToDisplayString()}}.New Get{{=include.Name}}(__ABSTRACTIONS__.Datoms tx) {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Sets the included entity of type {{= include.Name}} in the transaction.
        /// </summary>
        public required {{= include.ToDisplayString()}}.New {{= include.Name}} {
            init {
                if (Id != value.Id)
                    throw new InvalidOperationException("The id of the included entity must match the id of the including entity.");
            }
        }
        {{/each}}

        /// <summary>
        /// Adds this model to the given transaction.
        /// </summary>
        public void AddTo(__ABSTRACTIONS__.ITransaction tx)
        {
        /*
            {{each attr in model.Attributes}}
            {{if attr.IsCollection}}
            foreach (var itm in {{= attr.ContextualName}}) {
                tx.Add(Id, {{= attr.FieldName}}, itm, false);
            }
            {{elif attr.IsMarker}}
            if (Is{{= attr.ContextualName}}) {
                tx.Add(Id, {{= attr.FieldName}}, new __COMPARERS__.Null(), false);
            }
            {{else}}
            {{if attr.IsOptional && !attr.IsReference && !attr.IsValueType}}
            if ({{= attr.ContextualName}} is not null) {
                tx.Add(Id, {{= attr.FieldName}}, {{= attr.ContextualName}}!, false);
            }
            {{elif attr.IsOptional && attr.IsValueType && !attr.IsReference}}
            if ({{= attr.ContextualName}}.HasValue) {
                tx.Add(Id, {{= attr.FieldName}}, {{= attr.ContextualName}}.Value, false);
            }
            {{elif attr.IsOptional && attr.IsReference}}
            if ({{= attr.ContextualName}}.Value != 0) {
                tx.Add(Id, {{= attr.FieldName}}, {{= attr.ContextualName}}.Value, false);
            }
            {{elif attr.IsReference}}
            tx.Add(Id, {{= attr.FieldName}}, {{= attr.ContextualName}}.Value, false);
            {{else}}
            tx.Add(Id, {{= attr.FieldName}}, {{= attr.ContextualName}}, false);

            {{/if}}

            {{/if}}
            {{/each}}
            */
        }

        /// <summary>
        /// Implicit conversion from the model to the entity id.
        /// </summary>
        public static implicit operator __ABSTRACTIONS__.EntityId({{= model.Name}}.New model) {
            return model.Id;
        }

        /// <summary>
        /// Implicit conversion from the model to the model id.
        /// </summary>
        public static implicit operator {{= model.Name}}Id({{= model.Name}}.New model) {
            return model.{{= model.Name}}Id;
        }

        /// <summary>
        /// The entity id of the model as a model id.
        /// </summary>
        public {{= model.Name}}Id {{= model.Name}}Id => {{= model.Name}}Id.From(Id);

        /// <inheritdoc />
        public __ABSTRACTIONS__.EntityId Id { get; private set; }

        #region Attributes
        {{each attr in model.Attributes}}
        
        /// <inheritdoc cref="{{= model.Name}}.{{= attr.ContextualName}}" />
        {{if attr.IsReference && !attr.IsCollection}}
        public {{= attr.Prefix}} {{= attr.ReferenceType.ToDisplayString()}}Id {{= attr.ContextualName}} 
        { 
           get => throw new NotImplementedException();
           set => _datoms.Add(Id, {{= attr.FieldName}}, value);
        }
        {{elif attr.IsCollection}}
        public IEnumerable<{{= attr.HighLevelType.ToDisplayString()}}> {{= attr.ContextualName}} { get; set; } = [];
        {{elif attr.IsReference}}
        public {{= attr.Prefix}} {{= attr.HighLevelType.ToDisplayString()}} {{= attr.ContextualName}} { get; set; }
        {{elif attr.IsMarker}}
        public bool Is{{= attr.ContextualName}} { get; set; } = false;
        {{else}}
        public {{= attr.Prefix}} {{= attr.HighLevelType.ToDisplayString()}} {{= attr.ContextualName}} 
        {
            get => throw new NotImplementedException();
            set => _datoms.Add(Id, {{= attr.FieldName}}, value);
        }
        {{/if}}
        {{/each}}
        #endregion
    }

    /// <summary>
    /// The ReadOnly struct is a read-only version of the entity, it is used to access the entity
    /// in a read context. It immutable and must be reloaded to get updated data when the entity changes.
    /// </summary>
    {{= model.Comments}}
    public readonly partial struct ReadOnly :
        __MODELS__.IReadOnlyModel<{{= model.Name}}.ReadOnly> {

           /// <summary>
           /// The database segment containing the datoms for this entity in EAVT order.
           /// </summary>
           public readonly __ABSTRACTIONS__.Datoms EntitySegment;
           
           __ABSTRACTIONS__.Datoms __MODELS__.IHasIdAndEntitySegment.EntitySegment => this.EntitySegment; 

           /// <summary>
           /// Constructs a new ReadOnly model of the entity from the given segment and id.
           /// </summary>
           public ReadOnly(__ABSTRACTIONS__.IDb db, __ABSTRACTIONS__.Datoms segment, __ABSTRACTIONS__.EntityId id) {
               Db = db;
               Id = id;
               EntitySegment = segment;
           }

           /// <summary>
           /// Constructs a new ReadOnly model of the entity.
           /// </summary>
           public ReadOnly(__ABSTRACTIONS__.IDb db, __ABSTRACTIONS__.EntityId id) :
               this(db, db[id], id)
           {
           }

           /// <summary>
           /// The entity id of the model.
           /// </summary>
           public __ABSTRACTIONS__.EntityId Id { get; }

           /// <inheritdoc />
           public {{= model.Name}}Id {{= model.Name}}Id => {{= model.Name}}Id.From(Id);

           /// <summary>
           /// The database that the entity is associated with.
           /// </summary>
           public __ABSTRACTIONS__.IDb Db { get; }

           /// <summary>
           /// Rebases the entity to the most recent version of the database
           /// </summary>
           public ReadOnly Rebase() => new ReadOnly(Db.Connection.Db, Id);

           /// <summary>
           /// Constructs a new ReadOnly model of the entity.
           /// </summary>
           public static ReadOnly Create(__ABSTRACTIONS__.IDb db, __ABSTRACTIONS__.EntityId id) {
               return new ReadOnly(db, db[id], id);
           }

           /// <inheritdoc />
           public int Count => EntitySegment.Count;


           /// <inheritdoc />
           public IEnumerator<ResolvedDatom> GetEnumerator()
           {
               var resolver = Db.Connection.AttributeResolver;
               foreach (var datom in EntitySegment)
               {
                   yield return new __ABSTRACTIONS__.ResolvedDatom(datom, resolver);
               }
           }

           IEnumerator IEnumerable.GetEnumerator()
           {
               return GetEnumerator();
           }


           /// <summary>
           /// Looks for the given attribute in the entity
           /// </summary>
           public bool Contains(IAttribute attribute)
              => EntitySegment.Contains(attribute);
        

           /// <inheritdoc />
           public override string ToString()
           {
               return "{{= model.Name}}<" + Id + ">";
           }

           /// <inheritdoc />
           public bool IsValid()
           {
               // This is true when the struct is a default value.
               if (Db == null) return false;

               return this.Contains(PrimaryAttribute);
           }

           {{each include in model.Includes}}
           /// <summary>
           /// Tries convert this entity to a {{= include.Name}} entity, if the entity is not a {{= include.Name}} entity, it returns false.
           /// </summary>
           public {{= include.ToDisplayString()}}.ReadOnly As{{= include.Name}}() => new {{= include.ToDisplayString()}}.ReadOnly(Db, Id);
           {{/each}}

           {{each attr in model.Attributes}}
           /// <inheritdoc cref="{{= model.Name}}.{{= attr.ContextualName}}" />
           {{if attr.IsCollection && attr.IsReference && !attr.IsMarker}}
           public IEnumerable<__ABSTRACTIONS__.EntityId> {{= attr.ContextualName}} => EntitySegment.GetAllResolved({{= attr.FieldName}}, Db.Connection.AttributeResolver);
           public IEnumerable<{{= attr.ReferenceType.ToDisplayString()}}.ReadOnly> {{= attr.Name}} => {{= attr.FieldName}}.GetAllModels<{{= attr.ReferenceType.ToDisplayString()}}.ReadOnly>(Db, EntitySegment);
           {{elif attr.IsCollection}}
           public IEnumerable<{{=attr.HighLevelType.ToDisplayString()}}> {{= attr.ContextualName}} => EntitySegment.GetAllResolved({{= attr.FieldName}}, Db.Connection.AttributeResolver);
           {{elif attr.IsMarker}}
           public bool Is{{= attr.ContextualName}} => {{= attr.FieldName}}.Contains(this);
           {{elif attr.IsReference}}
           public {{= attr.ReferenceType.ToDisplayString()}}Id {{= attr.ContextualName}} => {{= attr.ReferenceType.ToDisplayString()}}Id.From({{= attr.FieldName}}.Get(this));
           {{else}}
           {{if attr.IsOptional}}
           public global::DynamicData.Kernel.Optional<{{= attr.HighLevelType.ToDisplayString()}}> {{= attr.ContextualName }} => {{= attr.FieldName}}.GetOptional(this);
           {{else}}
           public {{= attr.HighLevelType.ToDisplayString()}} {{= attr.ContextualName}} => {{= attr.FieldName}}.Get(this);
           {{/if}}
           {{/if}}


           {{if attr.IsReference && attr.IsScalar}}
           public {{= attr.ReferenceType.ToDisplayString()}}.ReadOnly {{= attr.Name}} => new {{= attr.ReferenceType.ToDisplayString()}}.ReadOnly(Db, {{= attr.FieldName}}.Get(this));
           {{/if}}

           {{/each}}

           {{each backref in model.BackReferences}}

           public IEnumerable<{{= backref.OtherModel.ToDisplayString()}}.ReadOnly> {{= backref.Name}} => Db.GetBackrefModels<{{= backref.OtherModel.ToDisplayString()}}.ReadOnly>({{= backref.OtherAttribute.ToDisplayString()}}, this.Id);
           {{/each}}

           /// <summary>
           /// Reloads the entity from the given database, essentially
           /// refreshing the entity.
           /// </summary>
           [Pure]
           public ReadOnly Rebase(__ABSTRACTIONS__.IDb db) => new ReadOnly(db, Id);

           /// <summary>
           /// Implicit conversion from the model to the entity id.
           /// </summary>
           public static implicit operator __ABSTRACTIONS__.EntityId({{= model.Name}}.ReadOnly model) {
               return model.Id;
           }

           /// <summary>
           /// Implicit conversion from the model to the model id.
           /// </summary>
           public static implicit operator {{= model.Name}}Id({{= model.Name}}.ReadOnly? model) {
               return {{= model.Name}}Id.From(model!.Value.Id);
           }
        }
}

/// <summary>
/// A value object representing the id of a {{= model.Name}} entity.
/// </summary>
[global::System.Text.Json.Serialization.JsonConverter(typeof({{= model.Name}}Id.JsonConverter))]
public readonly partial struct {{= model.Name}}Id : IEquatable<{{= model.Name}}Id>, IEquatable<__ABSTRACTIONS__.EntityId>
{
    /// <summary>
    /// The generic EntityId value this typed id wraps.
    /// </summary>
    public readonly __ABSTRACTIONS__.EntityId Value;

    /// <summary>
    /// Constructs a new {{= model.Name}}Id from the given entity id.
    /// </summary>
    public {{= model.Name}}Id(__ABSTRACTIONS__.EntityId id) => Value = id;

    /// <summary>
    /// Constructs a new {{= model.Name}}Id from the given entity id.
    /// </summary>
    public static {{= model.Name}}Id From(__ABSTRACTIONS__.EntityId id) => new {{= model.Name}}Id(id);

    /// <summary>
    /// Constructs a new {{= model.Name}}Id from the given ulong.
    /// </summary>
    public static {{= model.Name}}Id From(ulong id) => new {{= model.Name}}Id(__ABSTRACTIONS__.EntityId.From(id));

    /// <summary>
    /// Implicit conversion from the model id to the entity id.
    /// </summary>
    public static implicit operator __ABSTRACTIONS__.EntityId({{= model.Name}}Id id) => id.Value;
    
    /// <summary>
    /// Implicit conversion from the entity id to the model id.
    /// </summary>
    public static implicit operator {{= model.Name}}Id(EntityId id) => {{= model.Name}}Id.From(id);

    /// <summary>
    /// Equality comparison between two {{= model.Name}}Id values.
    /// </summary>
    public bool Equals({{= model.Name}}Id other)
    {
        return Value.Value == other.Value.Value;
    }

    /// <summary>
    /// Equality comparison between a {{= model.Name}}Id and an EntityId.
    /// </summary>
    public bool Equals(__ABSTRACTIONS__.EntityId other)
    {
        return Value.Value == other.Value;
    }

    /// <inheritdoc />
    public override string ToString()
    {
        return "{{= model.Name}}Id:" + Value.Value.ToString("x");
    }

    /// <inheritdoc />
    public static bool operator ==({{= model.Name}}Id left, {{= model.Name}}Id right) => left.Equals(right);
    
    /// <inheritdoc />
    public static bool operator !=({{= model.Name}}Id left, {{= model.Name}}Id right) => !left.Equals(right);

    /// <inheritdoc />
    public override bool Equals(object? obj)
    {
        return obj is {{= model.Name}}Id id && Equals(id);
    }

    /// <inheritdoc />
    public override int GetHashCode()
    {
        return Value.GetHashCode();
    }

    /// <summary>
    /// A JsonConverter for the {{= model.Name}}Id value object.
    /// </summary>
	internal class JsonConverter : global::System.Text.Json.Serialization.JsonConverter<{{= model.Name}}Id>
	{
	    private readonly global::System.Text.Json.Serialization.JsonConverter<__ABSTRACTIONS__.EntityId> _innerConverter = new __ABSTRACTIONS__.EntityId.JsonConverter();

		public override {{= model.Name}}Id Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
		{
		    return _innerConverter.Read(ref reader, typeToConvert, options);
		}

		public override void Write(global::System.Text.Json.Utf8JsonWriter writer, {{= model.Name}}Id value, global::System.Text.Json.JsonSerializerOptions options)
		{
		    _innerConverter.Write(writer, value.Value, options);
		}

		public override {{= model.Name}}Id ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
		{
    		return _innerConverter.ReadAsPropertyName(ref reader, typeToConvert, options);
		}

		public override void WriteAsPropertyName(global::System.Text.Json.Utf8JsonWriter writer, {{= model.Name}}Id value, global::System.Text.Json.JsonSerializerOptions options)
		{
		    _innerConverter.WriteAsPropertyName(writer, value.Value, options);
		}
	}
}

/// <summary>
/// Extension methods for the {{= model.Name}} model.
/// </summary>
public static class {{= model.Name}}Extensions {

    /// <summary>
    /// Adds the {{= model.Name}} model to the service collection.
    /// </summary>
    public static __DI__.IServiceCollection Add{{= model.Name}}Model(this __DI__.IServiceCollection services) {
        {{each attr in model.Attributes}}
        services.AddSingleton<__ABSTRACTIONS__.IAttribute>(_ => {{= attr.FieldName}});
        {{/each}}
        services.AddSingleton(_ => new ModelDefinition("{{= model.Name}}", {{= model.Name}}.PrimaryAttribute, {{=model.Name}}.AllAttributesWithIncludes));
        return services;
    }

    {{each include in model.Includes}}
    /// <summary>
    /// Tries to get the entity as a {{= model.Name}} entity, if the entity is not a {{= model.Name}} entity, it returns false.
    /// </summary>
    public static bool TryGetAs{{= model.Name}}(this {{= include.ToDisplayString()}}.ReadOnly model, [NotNullWhen(true)] out {{= model.Name}}.ReadOnly result) {
        var casted = new {{= model.Name}}.ReadOnly(model.Db, model.EntitySegment, model.Id);
        if (casted.IsValid()) {
            result = casted;
            return true;
        }

        result = default;
        return false;
    }

    /// <summary>
    /// Gets entities from the given collection that are of type {{= model.Name}}
    /// </summary>
    public static IEnumerable<{{= model.Name}}.ReadOnly> OfType{{= model.Name}}(this IEnumerable<{{= include.ToDisplayString()}}.ReadOnly> models) {
        foreach (var model in models)
        {
            if (model.TryGetAs{{= model.Name}}(out var casted))
            {
                yield return casted;
            }
        }
    }

    /// <summary>
    /// Gets entities from the given collection that are of type {{= model.Name}}
    /// </summary>
    public static {{= model.Name}}.ReadOnly To{{= model.Name}}(this {{= include.ToDisplayString()}}.ReadOnly model) {
        if (!model.TryGetAs{{= model.Name}}(out var casted))
        {
            throw new InvalidCastException("The model is not a {{= model.Name}} entity.");
        }

        return casted;
    }

    /// <summary>
    /// Returns true if the entity is a {{= model.Name}} entity.
    /// </summary>
    public static bool Is{{= model.Name}}(this {{= include.ToDisplayString()}}.ReadOnly model) {
        return model.TryGetAs{{= model.Name}}(out var _);
    }
    {{/each}}

    /// <summary>
    /// Assumes that this model has been commited to the database
    /// in the commit result. Loads this entity from the commited database
    /// and returns a ReadOnly model.
    /// </summary>
    public static {{= model.Name}}.ReadOnly Remap(this __ABSTRACTIONS__.ICommitResult result, {{= model.Name}}.New model) {
        return new {{= model.Name}}.ReadOnly(result.Db, result[model.Id]);
    }

}
