@namespace NexusMods.MnemonicDB.SourceGenerator
@methodname RenderModel
@model ModelAnalyzer

#nullable enable



namespace {{= model.Namespace}};

using global::System;
using global::System.Linq;
using global::System.Collections;
using global::System.Collections.Generic;
using global::TransparentValueObjects;

using global::NexusMods.MnemonicDB.Abstractions.Query;
using global::System.Reactive.Linq;
using global::DynamicData;
using global::Microsoft.Extensions.DependencyInjection;
using global::NexusMods.MnemonicDB.Abstractions;
using global::System.Diagnostics.CodeAnalysis;
using global::System.Diagnostics.Contracts;

using __ABSTRACTIONS__ = NexusMods.MnemonicDB.Abstractions;
using __MODELS__ = NexusMods.MnemonicDB.Abstractions.Models;
using __SEGMENTS__ = NexusMods.MnemonicDB.Abstractions.IndexSegments;
using __DI__ = Microsoft.Extensions.DependencyInjection;
using __COMPARERS__ = NexusMods.MnemonicDB.Abstractions.ElementComparers;


{{= model.Comments}}
public partial class {{= model.Name}} : __MODELS__.IModelFactory<{{= model.Name}}, {{= model.Name}}.ReadOnly>
{

    {{each attr in model.Attributes}}
    {{= attr.Comments}}
    {{if attr.IsReference}}
    public static {{= attr.AttributeType.ToDisplayString()}} {{= attr.ContextualName}} => {{= attr.FieldName}};
    {{else}}
    {{/if}}
    {{/each}}

    #region CRUD Methods

    {{each attr in model.Attributes}}
    {{if attr.IsIndexed || attr.IsReference}}
    public static __SEGMENTS__.Entities<{{= model.Name}}.ReadOnly> FindBy{{= attr.Name}}(__ABSTRACTIONS__.IDb db, {{= attr.HighLevelType.ToDisplayString()}} value) {
        return db.Datoms({{= attr.FieldName}}, value).AsModels<{{= model.Name}}.ReadOnly>(db);
    }
    {{/if}}
    {{/each}}

    /// <summary>
    /// A list of all required attributes of the model.
    /// </summary>
    public static __ABSTRACTIONS__.IAttribute[] RequiredAttributes => new __ABSTRACTIONS__.IAttribute[] {
        {{each attr in model.Attributes}}
        {{if !attr.IsMarker && !attr.IsOptional}}
        {{= attr.FieldName}},
        {{/if}}
        {{/each}}
    };

    /// <summary>
    /// The primary attribute of the model, this really just means one of the required attributes of the model
    /// if an entity has this attribute, it is considered a valid entity.
    /// </summary>
    public static __ABSTRACTIONS__.IAttribute PrimaryAttribute => {{= model.Attributes[0].FieldName}};

    /// <summary>
    /// A list of all attributes of the model.
    /// </summary>
    public static __ABSTRACTIONS__.IAttribute[] AllAttributes => new __ABSTRACTIONS__.IAttribute[] {
        {{each attr in model.Attributes}}
        {{= attr.FieldName}},
        {{/each}}
    };

    /// <summary>
    /// Returns all {{= model.Name}} entities in the database.
    /// </summary>
    public static __SEGMENTS__.Entities<{{=model.Name}}.ReadOnly> All(__ABSTRACTIONS__.IDb db) {
        return db.Datoms(PrimaryAttribute).AsModels<{{= model.Name}}.ReadOnly>(db);
    }


    /// <summary>
    /// Loads a model from the database, not providing any validation
    /// </summary>
    public static ReadOnly Load(__ABSTRACTIONS__.IDb db, __ABSTRACTIONS__.EntityId id) {
        return new ReadOnly(db, id);
    }

    /// <summary>
    /// Observe a model from the database, the stream ends when the model is deleted or otherwise invalidated
    /// </summary>
    public static IObservable<ReadOnly> Observe(IConnection conn, EntityId id)
    {
        return conn.ObserveDatoms(id)
            .QueryWhenChanged(d => new ReadOnly(conn.Db, id))
            .TakeWhile(model => model.IsValid());
    }

    /// <summary>
    /// Observe all models of this type from the database
    /// </summary>
    public static IObservable<DynamicData.IChangeSet<ReadOnly>> ObserveAll(IConnection conn)
    {
        return conn.ObserveDatoms(PrimaryAttribute)
            .Transform(d => Load(conn.Db, d.E));
    }

    /// <summary>
    /// Tries to get the entity with the given id from the database, if the model is invalid, it returns false.
    /// </summary>
    public static bool TryGet(__ABSTRACTIONS__.IDb db, __ABSTRACTIONS__.EntityId id, [NotNullWhen(true)] out {{= model.Name}}.ReadOnly? result)
    {
        var model = Load(db, id);
        if (model.IsValid()) {
            result = model;
            return true;
        }
        result = default;
        return false;
    }

    /// <summary>
    /// Assumes that the ids given point to {{= model.Name}} entities, and
    /// returns a list of ReadOnly models of the entities.
    /// </summary>
    public static IEnumerable<{{= model.Name}}.ReadOnly> Load(__ABSTRACTIONS__.IDb db, IEnumerable<__ABSTRACTIONS__.EntityId> ids) {
        return ids.Select(id => new {{= model.Name}}.ReadOnly(db, id));
    }

    #endregion


    public partial class New : __MODELS__.ITemporaryEntity, __MODELS__.IHasEntityId {


        {{if model.Includes.Count == 0}}
        
        public New(__ABSTRACTIONS__.ITransaction tx) : base() {
            Id = tx.TempId();
            tx.Attach(this);
        }
        
        {{else}}
        
        public New(__ABSTRACTIONS__.ITransaction tx, out __ABSTRACTIONS__.EntityId id) : base() {
            Id = tx.TempId();
            id = Id;
            tx.Attach(this);
        }
        
        public New(__ABSTRACTIONS__.ITransaction tx, __ABSTRACTIONS__.PartitionId partition, out __ABSTRACTIONS__.EntityId id) : base() {
            Id = tx.TempId(partition);
            id = Id;
            tx.Attach(this);
        }
        
        {{/if}}

        public New(__ABSTRACTIONS__.ITransaction tx, __ABSTRACTIONS__.EntityId eid) : base() {
            Id = eid;
            tx.Attach(this);
        }

        {{each include in model.Includes}}
        public {{= include.ToDisplayString()}}.New Get{{=include.Name}}(__ABSTRACTIONS__.ITransaction tx) {
            if (!tx.TryGet<{{= include.ToDisplayString()}}.New>(Id, out var value))
                throw new InvalidOperationException($"Unable to find {typeof({{= include.ToDisplayString()}}.New)} with ID {Id} in transaction!");

            return value;
        }

        public required {{= include.ToDisplayString()}}.New {{= include.Name}} {
            init {
                if (Id != value.Id)
                    throw new InvalidOperationException("The id of the included entity must match the id of the including entity.");
            }
        }
        {{/each}}

        public void AddTo(__ABSTRACTIONS__.ITransaction tx)
        {
            {{each attr in model.Attributes}}
            {{if attr.IsCollection}}
            foreach (var itm in {{= attr.ContextualName}}) {
                tx.Add(Id, {{= attr.FieldName}}, itm, false);
            }
            {{elif attr.IsMarker}}
            if (Is{{= attr.ContextualName}}) {
                tx.Add(Id, {{= attr.FieldName}}, new __COMPARERS__.Null(), false);
            }
            {{else}}
            {{if attr.IsOptional && !attr.IsReference && !attr.IsValueType}}
            if ({{= attr.ContextualName}} is not null) {
                tx.Add(Id, {{= attr.FieldName}}, {{= attr.ContextualName}}!, false);
            }
            {{elif attr.IsOptional && attr.IsValueType && !attr.IsReference}}
            if ({{= attr.ContextualName}}.HasValue) {
                tx.Add(Id, {{= attr.FieldName}}, {{= attr.ContextualName}}.Value, false);
            }
            {{elif attr.IsOptional && attr.IsReference}}
            if ({{= attr.ContextualName}}.Value != 0) {
                tx.Add(Id, {{= attr.FieldName}}, {{= attr.ContextualName}}.Value, false);
            }
            {{else}}
            tx.Add(Id, {{= attr.FieldName}}, {{= attr.ContextualName}}, false);

            {{/if}}

            {{/if}}
            {{/each}}
        }

        /// <summary>
        /// Implicit conversion from the model to the entity id.
        /// </summary>
        public static implicit operator __ABSTRACTIONS__.EntityId({{= model.Name}}.New model) {
            return model.Id;
        }

        /// <summary>
        /// Implicit conversion from the model to the model id.
        /// </summary>
        public static implicit operator {{= model.Name}}Id({{= model.Name}}.New model) {
            return model.{{= model.Name}}Id;
        }

        /// <summary>
        /// The entity id of the model as a model id.
        /// </summary>
        public {{= model.Name}}Id {{= model.Name}}Id => {{= model.Name}}Id.From(Id);

        /// <inheritdoc />
        public __ABSTRACTIONS__.EntityId Id { get; private set; }

        #region Attributes
        {{each attr in model.Attributes}}
        {{= attr.Comments}}
        {{if attr.IsReference && !attr.IsCollection}}
        public {{= attr.Prefix}} {{= attr.ReferenceType.ToDisplayString()}}Id {{= attr.ContextualName}} { get; set; }
        {{elif attr.IsReference && attr.IsCollection}}
        public {{= attr.Prefix}} {{= attr.HighLevelType.ToDisplayString()}}[] {{= attr.ContextualName}} { get; set; }
        {{elif attr.IsMarker}}
        public bool Is{{= attr.ContextualName}} { get; set; } = false;
        {{else}}
        public {{= attr.Prefix}} {{= attr.HighLevelType.ToDisplayString()}}{{= attr.Postfix}} {{= attr.ContextualName}} { get; set; }
        {{/if}}
        {{/each}}
        #endregion
    }

    {{= model.Comments}}
    public readonly partial struct ReadOnly :
        __MODELS__.IReadOnlyModel<{{= model.Name}}.ReadOnly> {

           /// <summary>
           /// The database segment containing the datoms for this entity in EAVT order.
           /// </summary>
           public readonly __SEGMENTS__.IndexSegment IndexSegment;

           public ReadOnly(__ABSTRACTIONS__.IDb db, __SEGMENTS__.IndexSegment segment, __ABSTRACTIONS__.EntityId id) {
               Db = db;
               Id = id;
               IndexSegment = segment;
           }

           /// <summary>
           /// Constructs a new ReadOnly model of the entity.
           /// </summary>
           public ReadOnly(__ABSTRACTIONS__.IDb db, __ABSTRACTIONS__.EntityId id) :
               this(db, db.Get(id), id)
           {
           }

           /// <summary>
           /// The entity id of the model.
           /// </summary>
           public __ABSTRACTIONS__.EntityId Id { get; }

           /// <inheritdoc />
           public {{= model.Name}}Id {{= model.Name}}Id => {{= model.Name}}Id.From(Id);

           /// <summary>
           /// The database that the entity is associated with.
           /// </summary>
           public __ABSTRACTIONS__.IDb Db { get; }

           /// <summary>
           /// Rebases the entity to the most recent version of the database
           /// </summary>
           public ReadOnly Rebase() => new ReadOnly(Db.Connection.Db, Id);

           /// <summary>
           /// Constructs a new ReadOnly model of the entity.
           /// </summary>
           public static ReadOnly Create(__ABSTRACTIONS__.IDb db, __ABSTRACTIONS__.EntityId id) {
               return new ReadOnly(db, db.Get(id), id);
           }

           /// <inheritdoc />
           public int Count => IndexSegment.Count;


           /// <inheritdoc />
           public IEnumerator<IReadDatom> GetEnumerator()
           {
               for (var i = 0; i < IndexSegment.Count; i++)
               {
                   yield return IndexSegment[i].Resolved;
               }
           }

           IEnumerator IEnumerable.GetEnumerator()
           {
               return GetEnumerator();
           }


           /// <summary>
           /// Looks for the given attribute in the entity
           /// </summary>
           public bool Contains(IAttribute attribute)
           {
               foreach (var datom in this)
               {
                   if (datom.A == attribute)
                       return true;
               }

               return false;
           }

           public override string ToString()
           {
               return "{{= model.Name}}<" + Id + ">";
           }

           public bool IsValid()
           {
               // This is true when the struct is a default value.
               if (Db == null) return false;

               return this.Contains(PrimaryAttribute);
           }

           {{each include in model.Includes}}
           public {{= include.ToDisplayString()}}.ReadOnly As{{= include.Name}}() => new {{= include.ToDisplayString()}}.ReadOnly(Db, Id);
           {{/each}}

           {{each attr in model.Attributes}}
           {{if attr.IsCollection && attr.IsReference && !attr.IsMarker}}
           public __SEGMENTS__.Values<__ABSTRACTIONS__.EntityId, ulong> {{= attr.ContextualName}} => {{= attr.FieldName}}.Get(this);
           public __SEGMENTS__.ValueEntities<{{= attr.ReferenceType.ToDisplayString()}}.ReadOnly> {{= attr.Name}} => __SEGMENTS__.ValuesExtensions.AsModels<{{= attr.ReferenceType.ToDisplayString()}}.ReadOnly>({{= attr.FieldName}}.Get(this), Db);
           {{elif attr.IsMarker}}
           public bool Is{{= attr.ContextualName}} => {{= attr.FieldName}}.Contains(this);
           {{elif attr.IsReference}}
           public {{= attr.ReferenceType.ToDisplayString()}}Id {{= attr.ContextualName}} => {{= attr.ReferenceType.ToDisplayString()}}Id.From({{= attr.FieldName}}.Get(this));
           {{else}}
           public {{= attr.HighLevelType.ToDisplayString()}} {{= attr.ContextualName}} => {{= attr.FieldName}}.Get(this);
           {{/if}}


           {{if attr.IsReference && attr.IsScalar}}
           public {{= attr.ReferenceType.ToDisplayString()}}.ReadOnly {{= attr.Name}} => new {{= attr.ReferenceType.ToDisplayString()}}.ReadOnly(Db, {{= attr.FieldName}}.Get(this));
           {{/if}}

           {{/each}}

           {{each backref in model.BackReferences}}

           public __SEGMENTS__.Entities<{{= backref.OtherModel.ToDisplayString()}}.ReadOnly> {{= backref.Name}} => Db.GetBackRefs({{= backref.OtherAttribute.ToDisplayString()}}, this.Id).AsModels<{{= backref.OtherModel.ToDisplayString()}}.ReadOnly>(Db);
           {{/each}}

           /// <summary>
           /// Reloads the entity from the given database, essentially
           /// refreshing the entity.
           /// </summary>
           [Pure]
           public ReadOnly Rebase(__ABSTRACTIONS__.IDb db) => new ReadOnly(db, Id);

           /// <summary>
           /// Implicit conversion from the model to the entity id.
           /// </summary>
           public static implicit operator __ABSTRACTIONS__.EntityId({{= model.Name}}.ReadOnly model) {
               return model.Id;
           }

           public static implicit operator {{= model.Name}}Id({{= model.Name}}.ReadOnly? model) {
               return {{= model.Name}}Id.From(model!.Value.Id);
           }
        }
}

/// <summary>
/// A value object representing the id of a {{= model.Name}} entity.
/// </summary>
public readonly partial struct {{= model.Name}}Id : IEquatable<{{= model.Name}}Id>, IEquatable<__ABSTRACTIONS__.EntityId>
{
    public readonly EntityId Value;

    public {{= model.Name}}Id(EntityId id) => Value = id;

    /// <summary>
    /// Constructs a new {{= model.Name}}Id from the given entity id.
    /// </summary>
    public static {{= model.Name}}Id From(__ABSTRACTIONS__.EntityId id) => new {{= model.Name}}Id(id);

    /// <summary>
    /// Constructs a new {{= model.Name}}Id from the given ulong.
    /// </summary>
    public static {{= model.Name}}Id From(ulong id) => new {{= model.Name}}Id(__ABSTRACTIONS__.EntityId.From(id));

    public static implicit operator EntityId({{= model.Name}}Id id) => id.Value;
    public static implicit operator {{= model.Name}}Id(EntityId id) => {{= model.Name}}Id.From(id);


    public bool Equals({{= model.Name}}Id other)
    {
        return Value.Value == other.Value.Value;
    }


    public bool Equals(__ABSTRACTIONS__.EntityId other)
    {
        return Value.Value == other.Value;
    }

    public override string ToString()
    {
        return "{{= model.Name}}Id:" + Value.Value.ToString("x");
    }

    public static bool operator ==({{= model.Name}}Id left, {{= model.Name}}Id right) => left.Equals(right);

    public static bool operator !=({{= model.Name}}Id left, {{= model.Name}}Id right) => !left.Equals(right);

    public override bool Equals(object? obj)
    {
        return obj is {{= model.Name}}Id id && Equals(id);
    }

    public override int GetHashCode()
    {
        return Value.GetHashCode();
    }
}


public static class {{= model.Name}}Extensions {
    public static __DI__.IServiceCollection Add{{= model.Name}}Model(this __DI__.IServiceCollection services) {
        {{each attr in model.Attributes}}
        services.AddSingleton<__ABSTRACTIONS__.IAttribute>(_ => {{= attr.FieldName}});
        {{/each}}
        return services;
    }

    {{each include in model.Includes}}
    /// <summary>
    /// Tries to get the entity as a {{= model.Name}} entity, if the entity is not a {{= model.Name}} entity, it returns false.
    /// </summary>
    public static bool TryGetAs{{= model.Name}}(this {{= include.ToDisplayString()}}.ReadOnly model, [NotNullWhen(true)] out {{= model.Name}}.ReadOnly result) {
        var casted = new {{= model.Name}}.ReadOnly(model.Db, model.IndexSegment, model.Id);
        if (casted.IsValid()) {
            result = casted;
            return true;
        }

        result = default;
        return false;
    }

    /// <summary>
    /// Gets entities from the given collection that are of type {{= model.Name}}
    /// </summary>
    public static IEnumerable<{{= model.Name}}.ReadOnly> OfType{{= model.Name}}(this IEnumerable<{{= include.ToDisplayString()}}.ReadOnly> models) {
        foreach (var model in models)
        {
            if (model.TryGetAs{{= model.Name}}(out var casted))
            {
                yield return casted;
            }
        }
    }

    /// <summary>
    /// Gets entities from the given collection that are of type {{= model.Name}}
    /// </summary>
    public static {{= model.Name}}.ReadOnly To{{= model.Name}}(this {{= include.ToDisplayString()}}.ReadOnly model) {
        if (!model.TryGetAs{{= model.Name}}(out var casted))
        {
            throw new InvalidCastException("The model is not a {{= model.Name}} entity.");
        }

        return casted;
    }

    /// <summary>
    /// Returns true if the entity is a {{= model.Name}} entity.
    /// </summary>
    public static bool Is{{= model.Name}}(this {{= include.ToDisplayString()}}.ReadOnly model) {
        return model.TryGetAs{{= model.Name}}(out var _);
    }
    {{/each}}

    /// <summary>
    /// Assumes that this model has been commited to the database
    /// in the commit result. Loads this entity from the commited database
    /// and returns a ReadOnly model.
    /// </summary>
    public static {{= model.Name}}.ReadOnly Remap(this __ABSTRACTIONS__.ICommitResult result, {{= model.Name}}.New model) {
        return new {{= model.Name}}.ReadOnly(result.Db, result[model.Id]);
    }

}
